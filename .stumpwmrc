;; -*-lisp-*-

(in-package :stumpwm)

;; change the prefix key to something else
(set-prefix-key (kbd "C-t"))

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))


;; Use xev to get keysym's
(define-keysym #x1008ff13 "XF86AudioRaiseVolume")
(define-keysym #x1008ff11 "XF86AudioLowerVolume")
(define-keysym #x1008ff12 "XF86AudioMute")

(define-keysym #x1008ff02 "XF86MonBrightnessUp")
(define-keysym #x1008ff03 "XF86MonBrightnessDown")

(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer sset Master 5-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer sset Master 5+")
(define-key *top-map* (kbd "XF86AudioMute") "exec amixer sset Master toggle")

(define-key *top-map* (kbd "XF86MonBrightnessUp") "exec xbacklight -inc 30")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "exec xbacklight -dec 30")

(define-key *top-map* (kbd "Print") "exec scrot")

(define-key *root-map* (kbd "b")   "exec firefox")
(define-key *root-map* (kbd "C-s") "colon1 exec urxvt -e ssh ")
(define-key *root-map* (kbd "l")   "exec xtrlock")
(define-key *root-map* (kbd "c")   "exec urxvt")

;; Message window font
(set-font "-xos4-terminus-medium-r-normal--16-140-72-72-c-80-iso8859-15")

(clear-window-placement-rules)

(define-frame-preference "Emacs"
  (1 t t :restore "emacs-editing-dump" :title "...xdvi")
  (0 t t :create "emacs-dump" :class "Emacs"))

(define-frame-preference "Web"
  (0 t   t :class "Firefox"))

(define-frame-preference "Media"
  (0 t   t :instance "aumix")
  (0 t   t :class "MPlayer")
  (0 t   t :class "VLC")
  (0 t   t :class "Avidemux"))

;; Window list format
(setf *window-format* "^B%m%n^b %40t  ")

;; width in pixels given to the borders of windows with maxsize or ratio
;; hints
(setf *maxsize-border-width* 1)

;; width in pixels given to the borders of transient or pop-up windows
(setf *transient-border-width* 1)

;; width in pixels given to the borders of regular windows
(setf *normal-border-width* 1)

;; Set focus with mouse
(setf *mouse-focus-policy* :click)

;; Mode-line

(defun show-time ()
  (multiple-value-bind
	(second minute hour date month year day-of-week dst-p tz)
      (get-decoded-time)
    (format nil "~2,'0d:~2,'0d ~d/~2,'0d/~d" hour minute date month year)))

(stumpwm:toggle-mode-line (stumpwm:current-screen)
                          (stumpwm:current-head))

(setf stumpwm:*mode-line-background-color* "Black"
      stumpwm:*mode-line-border-color*     "Black")

(setf stumpwm:*screen-mode-line-format*
      (list "<"(show-time) "> [^B%n^b]: %W"))
